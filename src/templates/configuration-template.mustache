
/** Type definitions **/
export interface MethodConfig {
    [method: string]: {
        consume: string;
        accept: string;
        reportProgress: boolean,
        withCredentials: boolean,
    }
}

export interface ConfigOptions { 
    [method: string]: {
        consume?: string[];
        accept?: string[];
    }
}

export interface ApiKeys {
    [name: string]: string;
}

/** Definition of available options **/

export const apiEndpoints = [
{{#servers}}    "{{{.}}}",
{{/servers}}
];

export const configOptions: ConfigOptions = {
{{#methods}}
{{#hasMediaTypeSetting}}    {{name}}: {
{{#hasRequestBody}}        consume: [{{#requestBodies}} '{{{mediaType}}}',{{/requestBodies}} ],
{{/hasRequestBody}}
{{#hasSuccessResponse}}        accept: [{{#successResponse}}{{#content}} '{{{mediaType}}}',{{/content}}{{/successResponse}} ]
{{/hasSuccessResponse}}
    },

{{/hasMediaTypeSetting}}
{{/methods}}
}

/** ENTER YOUR INITIAL CONFIGURATION OPTIONS HERE **/
export const methodConfig: MethodConfig = {
{{#methods}}    {{name}}: {
{{#hasRequestBody}}        consume: configOptions.{{name}}.consume[0],
{{/hasRequestBody}}
{{^hasRequestBody}}        consume: null,
{{/hasRequestBody}}
{{#hasSuccessResponse}}        accept: configOptions.{{name}}.accept[0],
{{/hasSuccessResponse}}
{{^hasSuccessResponse}}        accept: null,
{{/hasSuccessResponse}}
        reportProgress: false,
        withCredentials: false
    },

{{/methods}}
}

export const apiKeys: ApiKeys = {
{{#security.usedApiKeys}}    {{.}}: null,
{{/security.usedApiKeys}}
}
export const bearerToken = null; 
export const basicToken = null; 
export const apiEndpoint = apiEndpoints[0];